import React, { useState } from 'react';
import axios from 'axios';

const VEXConverter = ({ onBack }) => {
  const [sbomFile, setSbomFile] = useState(null);
  const [fileType, setFileType] = useState(null); // 'json' or 'xlsx'
  const [productName, setProductName] = useState('');
  const [productVersion, setProductVersion] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    setSbomFile(file);
    setResult(null);
    setError(null);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if (file) {
      if (file.name.endsWith('.json')) {
        setFileType('json');
      } else if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
        setFileType('xlsx');
      } else {
        setFileType(null);
        setError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSON –∏–ª–∏ XLSX');
      }
    }
  };

  const handleAnalyze = async () => {
    if (!sbomFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }

    if (!fileType) {
      setError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);

    const formData = new FormData();

    if (fileType === 'json') {
      formData.append('sbom_file', sbomFile);

      try {
        const response = await axios.post(`${API_URL}/api/sbom-to-vex`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });

        setResult(response.data);
      } catch (err) {
        setError(err.response?.data?.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ SBOM');
      } finally {
        setLoading(false);
      }
    } else if (fileType === 'xlsx') {
      formData.append('xlsx_file', sbomFile);
      if (productName) formData.append('product_name', productName);
      if (productVersion) formData.append('product_version', productVersion);

      try {
        const response = await axios.post(`${API_URL}/api/xlsx-to-vex`, formData, {
          headers: {
            'Content-Type': 'multipart/form-data',
          },
        });

        setResult(response.data);
      } catch (err) {
        setError(err.response?.data?.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ XLSX');
      } finally {
        setLoading(false);
      }
    }
  };

  const handleConvert = async () => {
    if (!sbomFile) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª');
      return;
    }

    if (!fileType) {
      setError('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
      return;
    }

    setLoading(true);
    setError(null);

    const formData = new FormData();
    let endpoint = '';

    if (fileType === 'json') {
      formData.append('sbom_file', sbomFile);
      endpoint = '/api/sbom-to-vex/export';
    } else if (fileType === 'xlsx') {
      formData.append('xlsx_file', sbomFile);
      if (productName) formData.append('product_name', productName);
      if (productVersion) formData.append('product_version', productVersion);
      endpoint = '/api/xlsx-to-vex/export';
    }

    try {
      const response = await axios.post(`${API_URL}${endpoint}`, formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
        responseType: 'blob',
      });

      // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º
      const contentDisposition = response.headers['content-disposition'];
      let filename = 'vex_document.json';
      if (contentDisposition) {
        const filenameMatch = contentDisposition.match(/filename="?(.+)"?/i);
        if (filenameMatch) {
          filename = filenameMatch[1];
        }
      }

      const url = window.URL.createObjectURL(new Blob([response.data]));
      const link = document.createElement('a');
      link.href = url;
      link.setAttribute('download', filename);
      document.body.appendChild(link);
      link.click();
      link.remove();

      setResult({
        status: 'success',
        message: 'VEX –¥–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω',
        filename: filename
      });
    } catch (err) {
      setError(err.response?.data?.detail || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="tool-container">
      <button onClick={onBack} className="back-button">
        ‚Üê –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      </button>

      <div className="tool-header">
        <h2>üìã VEX Converter</h2>
        <p>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è SBOM –∏–ª–∏ XLSX –≤ —Ñ–æ—Ä–º–∞—Ç VEX (Vulnerability Exploitability eXchange)</p>
      </div>

      <div className="upload-section">
        <div className="file-input-group">
          <label>
            <strong>–§–∞–π–ª —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏:</strong>
            <input
              type="file"
              accept=".json,.xlsx,.xls"
              onChange={handleFileChange}
              disabled={loading}
            />
            {sbomFile && (
              <span className="file-name">
                ‚úì {sbomFile.name}
                {fileType && <span className="file-type-badge">[{fileType.toUpperCase()}]</span>}
              </span>
            )}
          </label>
          <p className="file-hint">
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: CycloneDX SBOM (JSON) –∏–ª–∏ XLSX —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
          </p>
        </div>

        {fileType === 'xlsx' && (
          <div className="product-info-section">
            <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):</h4>
            <div className="product-inputs">
              <label>
                <strong>–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞:</strong>
                <input
                  type="text"
                  value={productName}
                  onChange={(e) => setProductName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: My Application"
                  disabled={loading}
                  className="product-input"
                />
              </label>
              <label>
                <strong>–í–µ—Ä—Å–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞:</strong>
                <input
                  type="text"
                  value={productVersion}
                  onChange={(e) => setProductVersion(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 1.0.0"
                  disabled={loading}
                  className="product-input"
                />
              </label>
            </div>
            <p className="field-hint">
              –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–¥—É–∫—Ç–µ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞
            </p>
          </div>
        )}
      </div>

      <div className="action-buttons">
        <button
          onClick={handleAnalyze}
          disabled={loading || !sbomFile}
          className="btn-primary"
        >
          {loading ? '–ê–Ω–∞–ª–∏–∑...' : `–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ${fileType === 'xlsx' ? 'XLSX' : 'SBOM'}`}
        </button>

        <button
          onClick={handleConvert}
          disabled={loading || !sbomFile}
          className="btn-success"
        >
          {loading ? '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è...' : '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ VEX'}
        </button>
      </div>

      {error && (
        <div className="message error-message">
          <strong>–û—à–∏–±–∫–∞:</strong> {error}
        </div>
      )}

      {result && (
        <div className="message success-message">
          <strong>–£—Å–ø–µ—Ö!</strong>
          {result.message ? (
            <div className="result-details">
              <p>{result.message}</p>
              {result.filename && <p>–§–∞–π–ª: {result.filename}</p>}
            </div>
          ) : fileType === 'json' ? (
            <div className="result-details">
              <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</h4>
              <p>‚úì –§–æ—Ä–º–∞—Ç SBOM: {result.sbom_format} (–≤–µ—Ä—Å–∏—è {result.sbom_version})</p>
              <p>‚úì –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ SBOM: {result.sbom_components}</p>
              <p>‚úì –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ SBOM: {result.sbom_vulnerabilities}</p>
              <p>‚úì –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ VEX: {result.vex_vulnerabilities}</p>
              <p>‚úì –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä VEX: {result.vex_serial_number}</p>
              <p>‚úì –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {new Date(result.conversion_timestamp).toLocaleString('ru-RU')}</p>
            </div>
          ) : fileType === 'xlsx' ? (
            <div className="result-details">
              <h4>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:</h4>
              <p>‚úì –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: {result.source_filename}</p>
              <p>‚úì –°—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: {result.source_rows}</p>
              <p>‚úì –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ VEX: {result.vex_vulnerabilities}</p>
              <p>‚úì –ü—Ä–æ–¥—É–∫—Ç: {result.product_name} (–≤–µ—Ä—Å–∏—è {result.product_version})</p>
              <p>‚úì –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä VEX: {result.vex_serial_number}</p>
              <p>‚úì –í–µ—Ä—Å–∏—è VEX: {result.vex_version}</p>
              <p>‚úì –í—Ä–µ–º—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {new Date(result.conversion_timestamp).toLocaleString('ru-RU')}</p>

              {result.statistics && (
                <div className="statistics-section">
                  <h4>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</h4>

                  {result.statistics.state_distribution && (
                    <div className="stat-group">
                      <strong>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:</strong>
                      <ul>
                        {Object.entries(result.statistics.state_distribution).map(([state, count]) => (
                          <li key={state}>{state}: {count}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {result.statistics.justification_distribution && Object.keys(result.statistics.justification_distribution).length > 0 && (
                    <div className="stat-group">
                      <strong>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è:</strong>
                      <ul>
                        {Object.entries(result.statistics.justification_distribution).map(([justification, count]) => (
                          <li key={justification}>{justification}: {count}</li>
                        ))}
                      </ul>
                    </div>
                  )}

                  {result.statistics.technology_distribution && (
                    <div className="stat-group">
                      <strong>–¢–æ–ø-5 —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:</strong>
                      <ul>
                        {Object.entries(result.statistics.technology_distribution)
                          .sort((a, b) => b[1] - a[1])
                          .slice(0, 5)
                          .map(([tech, count]) => (
                            <li key={tech}>{tech}: {count}</li>
                          ))}
                      </ul>
                    </div>
                  )}

                  {result.statistics.project_distribution && (
                    <div className="stat-group">
                      <strong>–¢–æ–ø-5 –ø—Ä–æ–µ–∫—Ç–æ–≤:</strong>
                      <ul>
                        {Object.entries(result.statistics.project_distribution)
                          .sort((a, b) => b[1] - a[1])
                          .slice(0, 5)
                          .map(([project, count]) => (
                            <li key={project}>{project}: {count}</li>
                          ))}
                      </ul>
                    </div>
                  )}

                  {result.statistics.has_exploit_count > 0 && (
                    <div className="stat-group warning">
                      <strong>‚ö†Ô∏è –£—è–∑–≤–∏–º–æ—Å—Ç–µ–π —Å —ç–∫—Å–ø–ª–æ–π—Ç–∞–º–∏: {result.statistics.has_exploit_count}</strong>
                    </div>
                  )}
                </div>
              )}
            </div>
          ) : null}
        </div>
      )}

      <div className="info-section">
        <h3>–ß—Ç–æ —Ç–∞–∫–æ–µ VEX?</h3>
        <p>
          VEX (Vulnerability Exploitability eXchange) - —ç—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          –æ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–∞–º. VEX –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å,
          –∫–∞–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω–∏–º—ã –∫ –≤–∞—à–µ–º—É –ø—Ä–æ–¥—É–∫—Ç—É, –∞ –∫–∞–∫–∏–µ - –Ω–µ—Ç.
        </p>

        <h3>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä:</h3>
        <ol>
          <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª:
            <ul>
              <li><strong>JSON:</strong> SBOM —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ CycloneDX v1.6</li>
              <li><strong>XLSX:</strong> –¢–∞–±–ª–∏—Ü–∞ —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏ (–∏–∑ CodeScoring, NBSS –∏ —Ç.–¥.)</li>
            </ul>
          </li>
          <li>–î–ª—è XLSX —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –≤–µ—Ä—Å–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ VEX" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è VEX –¥–æ–∫—É–º–µ–Ω—Ç–∞</li>
          <li>VEX –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω</li>
        </ol>

        <h3>–ß—Ç–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –≤ VEX –¥–æ–∫—É–º–µ–Ω—Ç:</h3>
        <ul>
          <li>–í—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞</li>
          <li>–†–µ–π—Ç–∏–Ω–≥–∏ –∏ –æ—Ü–µ–Ω–∫–∏ (CVSS 2/3 scores)</li>
          <li>–°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (NVD, GitHub Advisories, –∏ —Ç.–¥.)</li>
          <li>CWE –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è</li>
          <li>–û–ø–∏—Å–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
          <li>–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –≤–µ—Ä—Å–∏–∏</li>
          <li><strong>VEX Analysis:</strong> state, justification, response, detail</li>
          <li>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ø—Ä–æ–µ–∫—Ç—ã, –æ–∫—Ä—É–∂–µ–Ω–∏–µ</li>
        </ul>

        <h3>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ XLSX —Ñ–∞–π–ª—É:</h3>
        <p>–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ XLSX —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:</p>
        <ul>
          <li><strong>–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ:</strong> CVE ID, Dependency name, Dependency version</li>
          <li><strong>VEX –ø–æ–ª—è:</strong> State, Justification, Response, Detail</li>
          <li><strong>–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ:</strong> CVSS scores, CWEs, Summary, Fixed version, Technology, Project, –∏ –¥—Ä—É–≥–∏–µ</li>
        </ul>

        <div className="supported-formats">
          <strong>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:</strong>
          <ul>
            <li>CycloneDX 1.6 SBOM (JSON)</li>
            <li>XLSX —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏ (CodeScoring, NBSS, etc.)</li>
          </ul>
        </div>
      </div>
    </div>
  );
};

export default VEXConverter;
