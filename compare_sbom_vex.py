"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ SBOM —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º VEX –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
"""
import json
import sys
import os

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏ Windows
if sys.platform == 'win32':
    os.system('chcp 65001 > nul')
    sys.stdout.reconfigure(encoding='utf-8')

def compare_sbom_vex(sbom_path, vex_path):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç SBOM –∏ VEX –¥–æ–∫—É–º–µ–Ω—Ç—ã"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
    print("=" * 80)
    print("–°–†–ê–í–ù–ï–ù–ò–ï SBOM –ò VEX –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 80)

    print(f"\nüìÇ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    print(f"   SBOM: {sbom_path}")
    print(f"   VEX:  {vex_path}")

    with open(sbom_path, 'r', encoding='utf-8') as f:
        sbom = json.load(f)

    with open(vex_path, 'r', encoding='utf-8') as f:
        vex = json.load(f)

    print("   ‚úì –§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("1. –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:")
    print(f"   SBOM bomFormat: {sbom.get('bomFormat')}")
    print(f"   VEX bomFormat:  {vex.get('bomFormat')}")
    print(f"   {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if sbom.get('bomFormat') == vex.get('bomFormat') else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

    print(f"\n   SBOM specVersion: {sbom.get('specVersion')}")
    print(f"   VEX specVersion:  {vex.get('specVersion')}")
    print(f"   {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if sbom.get('specVersion') == vex.get('specVersion') else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    print("\n2. –ú–ï–¢–ê–î–ê–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–ê:")
    sbom_component = sbom.get('metadata', {}).get('component', {})
    vex_component = vex.get('metadata', {}).get('component', {})

    print(f"   SBOM component name: {sbom_component.get('name')}")
    print(f"   VEX component name:  {vex_component.get('name')}")
    print(f"   {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if sbom_component.get('name') == vex_component.get('name') else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

    print(f"\n   SBOM component version: {sbom_component.get('version')}")
    print(f"   VEX component version:  {vex_component.get('version')}")
    print(f"   {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if sbom_component.get('version') == vex_component.get('version') else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    print("\n3. –£–Ø–ó–í–ò–ú–û–°–¢–ò:")
    sbom_vulns = sbom.get('vulnerabilities', [])
    vex_vulns = vex.get('vulnerabilities', [])

    print(f"   SBOM —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {len(sbom_vulns)}")
    print(f"   VEX —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:  {len(vex_vulns)}")
    print(f"   {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if len(sbom_vulns) == len(vex_vulns) else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ CVE ID –∏–∑ SBOM –µ—Å—Ç—å –≤ VEX
    sbom_cve_ids = set(v.get('id') for v in sbom_vulns)
    vex_cve_ids = set(v.get('id') for v in vex_vulns)

    print(f"\n   –í—Å–µ CVE –∏–∑ SBOM –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ VEX: ", end='')
    if sbom_cve_ids == vex_cve_ids:
        print("‚úì –î–ê")
    else:
        print("‚úó –ù–ï–¢")
        missing = sbom_cve_ids - vex_cve_ids
        if missing:
            print(f"   –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ: {missing}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–π —É—è–∑–≤–∏–º–æ—Å—Ç–∏
    print("\n4. –î–ï–¢–ê–õ–ò –ü–ï–†–í–û–ô –£–Ø–ó–í–ò–ú–û–°–¢–ò (CVE-2016-1000027):")
    if sbom_vulns and vex_vulns:
        sbom_first = sbom_vulns[0]
        vex_first = vex_vulns[0]

        fields_to_check = ['id', 'description', 'recommendation', 'published', 'updated']
        for field in fields_to_check:
            sbom_val = sbom_first.get(field)
            vex_val = vex_first.get(field)
            match = '‚úì' if sbom_val == vex_val else '‚úó'
            print(f"   {match} {field}: ", end='')
            if sbom_val == vex_val:
                print("—Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            else:
                print(f"—Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        print("\n   –†–µ–π—Ç–∏–Ω–≥–∏:")
        sbom_ratings = sbom_first.get('ratings', [])
        vex_ratings = vex_first.get('ratings', [])
        print(f"      SBOM: {len(sbom_ratings)} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        print(f"      VEX:  {len(vex_ratings)} —Ä–µ–π—Ç–∏–Ω–≥–æ–≤")
        print(f"      {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if len(sbom_ratings) == len(vex_ratings) else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

        if sbom_ratings and vex_ratings:
            print(f"      SBOM –ø–µ—Ä–≤—ã–π: CVSSv{sbom_ratings[0].get('method', '').replace('CVSSv', '')} = {sbom_ratings[0].get('score')}")
            print(f"      VEX –ø–µ—Ä–≤—ã–π:  CVSSv{vex_ratings[0].get('method', '').replace('CVSSv', '')} = {vex_ratings[0].get('score')}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Å—ã–ª–∫–∏
        print("\n   –°—Å—ã–ª–∫–∏ (references):")
        sbom_refs = sbom_first.get('references', [])
        vex_refs = vex_first.get('references', [])
        print(f"      SBOM: {len(sbom_refs)} —Å—Å—ã–ª–æ–∫")
        print(f"      VEX:  {len(vex_refs)} —Å—Å—ã–ª–æ–∫")
        print(f"      {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if len(sbom_refs) == len(vex_refs) else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CWE
        print("\n   CWE:")
        sbom_cwes = sbom_first.get('cwes', [])
        vex_cwes = vex_first.get('cwes', [])
        print(f"      SBOM: {sbom_cwes}")
        print(f"      VEX:  {vex_cwes}")
        print(f"      {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if sbom_cwes == vex_cwes else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        print("\n   –ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (affects):")
        sbom_affects = sbom_first.get('affects', [])
        vex_affects = vex_first.get('affects', [])
        print(f"      SBOM: {len(sbom_affects)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print(f"      VEX:  {len(vex_affects)} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        if sbom_affects and vex_affects:
            print(f"      SBOM ref: {sbom_affects[0].get('ref')}")
            print(f"      VEX ref:  {vex_affects[0].get('ref')}")
            print(f"      {'‚úì –°–æ–≤–ø–∞–¥–∞—é—Ç' if sbom_affects[0].get('ref') == vex_affects[0].get('ref') else '‚úó –ù–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç'}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º analysis (—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ –¥–ª—è VEX)
        print("\n5. VEX-–°–ü–ï–¶–ò–§–ò–ß–ù–´–ï –ü–û–õ–Ø:")
        print(f"   Analysis –≤ VEX: ", end='')
        if 'analysis' in vex_first:
            print("‚úì –ü–†–ò–°–£–¢–°–¢–í–£–ï–¢")
            analysis = vex_first['analysis']
            print(f"      - state: {analysis.get('state')}")
            print(f"      - justification: {analysis.get('justification')}")
            print(f"      - detail: {analysis.get('detail')}")
        else:
            print("‚úó –û–¢–°–£–¢–°–¢–í–£–ï–¢")

    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Å–µ–º —É—è–∑–≤–∏–º–æ—Å—Ç—è–º
    print("\n6. –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–°–ï–ú –£–Ø–ó–í–ò–ú–û–°–¢–Ø–ú:")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏–º–µ—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    required_fields = ['id', 'ratings', 'references', 'cwes', 'description', 'affects']
    stats = {field: 0 for field in required_fields}

    for vuln in vex_vulns:
        for field in required_fields:
            if field in vuln and vuln[field]:
                stats[field] += 1

    print("   –ü–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ VEX:")
    for field, count in stats.items():
        percentage = (count / len(vex_vulns) * 100) if vex_vulns else 0
        print(f"      - {field}: {count}/{len(vex_vulns)} ({percentage:.1f}%)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ analysis –≤–æ –≤—Å–µ—Ö —É—è–∑–≤–∏–º–æ—Å—Ç—è—Ö
    analysis_count = sum(1 for v in vex_vulns if 'analysis' in v)
    print(f"      - analysis: {analysis_count}/{len(vex_vulns)} ({analysis_count/len(vex_vulns)*100:.1f}%)")

    print("\n" + "=" * 80)
    print("–ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    print("=" * 80)

    checks = []
    checks.append(("–§–æ—Ä–º–∞—Ç CycloneDX 1.6", sbom.get('bomFormat') == vex.get('bomFormat') and vex.get('specVersion') == '1.6'))
    checks.append(("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π", len(sbom_vulns) == len(vex_vulns)))
    checks.append(("CVE ID —Å–æ–≤–ø–∞–¥–∞—é—Ç", sbom_cve_ids == vex_cve_ids))
    checks.append(("–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", sbom_component.get('name') == vex_component.get('name')))
    checks.append(("VEX analysis –¥–æ–±–∞–≤–ª–µ–Ω", analysis_count == len(vex_vulns)))

    all_passed = all(check[1] for check in checks)

    for check_name, passed in checks:
        status = "‚úì" if passed else "‚úó"
        print(f"{status} {check_name}")

    print("\n" + ("‚úÖ VEX –î–û–ö–£–ú–ï–ù–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –°–û–û–¢–í–ï–¢–°–¢–í–£–ï–¢ –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ú–£ SBOM" if all_passed else "‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–´ –†–ê–°–•–û–ñ–î–ï–ù–ò–Ø"))
    print("=" * 80)

    return all_passed


if __name__ == "__main__":
    sbom_file = r"C:\Users\Sergey Bakunin\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞\SBOM_to_VEX\bom_CRAB_CRAB_file_cyclonedx_v1_6.json"
    vex_file = r"C:\Users\Sergey Bakunin\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\–ù–æ–≤–∞—è –ø–∞–ø–∫–∞\SBOM_to_VEX\CRAB_CRAB_file_vex_document.json"

    compare_sbom_vex(sbom_file, vex_file)
