import pandas as pd
import sys
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UTF-8 –¥–ª—è Windows
if sys.platform == 'win32':
    os.system('chcp 65001 > nul')
    sys.stdout.reconfigure(encoding='utf-8')

print("=" * 80)
print("–ê–Ω–∞–ª–∏–∑ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤")
print("=" * 80)

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
file1 = r"C:\Users\Sergey Bakunin\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\CodeScoring files\Vuln_Migrate\test\table_vuln_with_comments.xlsx"
file2 = r"C:\Users\Sergey Bakunin\OneDrive\–†–∞–±–æ—á–∏–π —Å—Ç–æ–ª\CodeScoring files\Vuln_Migrate\test\table_from_codescoring.xlsx"

print("\nüìÑ –§–∞–π–ª 1 (source): table_vuln_with_comments.xlsx")
print("-" * 80)
df1 = pd.read_excel(file1)
print(f"–°—Ç—Ä–æ–∫: {len(df1)}")
print(f"–°—Ç–æ–ª–±—Ü–æ–≤: {len(df1.columns)}")
print(f"\n–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤:")
for i, col in enumerate(df1.columns):
    print(f"  {chr(65+i)}: {col}")

print(f"\n–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ (A:CVE ID, C:Project, D:Comment):")
print(df1[['CVE ID' if 'CVE ID' in df1.columns else df1.columns[0],
           df1.columns[2],
           df1.columns[3]]].head())

print(f"\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:")
comment_col = df1.columns[3]  # D column
comments_count = df1[comment_col].notna().sum()
print(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏: {comments_count}")
print(f"  –ü—É—Å—Ç—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {df1[comment_col].isna().sum()}")

print("\n" + "=" * 80)
print("\nüìÑ –§–∞–π–ª 2 (target): table_from_codescoring.xlsx")
print("-" * 80)
df2 = pd.read_excel(file2)
print(f"–°—Ç—Ä–æ–∫: {len(df2)}")
print(f"–°—Ç–æ–ª–±—Ü–æ–≤: {len(df2.columns)}")
print(f"\n–°–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø–µ—Ä–≤—ã–µ 15):")
for i, col in enumerate(df2.columns[:15]):
    print(f"  {chr(65+i)}: {col}")

print(f"\n–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫ (A:CVE ID, K:Project):")
cve_col = df2.columns[0]  # A column
project_col = df2.columns[10]  # K column (–∏–Ω–¥–µ–∫—Å 10)
print(df2[[cve_col, project_col]].head())

print("\n" + "=" * 80)
print("\nüîç –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
print("-" * 80)

# –ê–Ω–∞–ª–∏–∑ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π CVE ID
cve1_col = df1.columns[0]  # A
cve2_col = df2.columns[0]  # A
project1_col = df1.columns[2]  # C
project2_col = df2.columns[10]  # K

cve_set1 = set(df1[cve1_col].dropna().astype(str).str.strip())
cve_set2 = set(df2[cve2_col].dropna().astype(str).str.strip())

print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE –≤ file1: {len(cve_set1)}")
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö CVE –≤ file2: {len(cve_set2)}")
print(f"–û–±—â–∏—Ö CVE: {len(cve_set1 & cve_set2)}")
print(f"CVE —Ç–æ–ª—å–∫–æ –≤ file1: {len(cve_set1 - cve_set2)}")
print(f"CVE —Ç–æ–ª—å–∫–æ –≤ file2 (–Ω–æ–≤—ã–µ): {len(cve_set2 - cve_set1)}")

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤
project_set1 = set(df1[project1_col].dropna().astype(str).str.strip())
project_set2 = set(df2[project2_col].dropna().astype(str).str.strip())

print(f"\n–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ file1: {len(project_set1)}")
print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ file2: {len(project_set2)}")
print(f"–û–±—â–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤: {len(project_set1 & project_set2)}")

# –ü—Ä–æ–µ–∫—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ
projects_only_in_file1 = project_set1 - project_set2
projects_only_in_file2 = project_set2 - project_set1

if projects_only_in_file1:
    print(f"\n‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç—ã —Ç–æ–ª—å–∫–æ –≤ file1 ({len(projects_only_in_file1)}):")
    for proj in sorted(projects_only_in_file1)[:10]:
        print(f"  - {proj}")
    if len(projects_only_in_file1) > 10:
        print(f"  ... –∏ –µ—â–µ {len(projects_only_in_file1) - 10}")

if projects_only_in_file2:
    print(f"\n‚úÖ –ù–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ file2 ({len(projects_only_in_file2)}):")
    for proj in sorted(projects_only_in_file2)[:10]:
        print(f"  - {proj}")
    if len(projects_only_in_file2) > 10:
        print(f"  ... –∏ –µ—â–µ {len(projects_only_in_file2) - 10}")

# –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä (CVE, Project)
pairs1 = set()
for _, row in df1.iterrows():
    cve = str(row[cve1_col]).strip() if pd.notna(row[cve1_col]) else ''
    proj = str(row[project1_col]).strip() if pd.notna(row[project1_col]) else ''
    if cve and proj:
        pairs1.add((cve, proj))

pairs2 = set()
for _, row in df2.iterrows():
    cve = str(row[cve2_col]).strip() if pd.notna(row[cve2_col]) else ''
    proj = str(row[project2_col]).strip() if pd.notna(row[project2_col]) else ''
    if cve and proj:
        pairs2.add((cve, proj))

matched_pairs = pairs1 & pairs2

print(f"\nüìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ä (CVE ID, Project):")
print(f"  –ü–∞—Ä –≤ file1: {len(pairs1)}")
print(f"  –ü–∞—Ä –≤ file2: {len(pairs2)}")
print(f"  –°–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –ø–∞—Ä: {len(matched_pairs)}")
print(f"  –ü–∞—Ä —Ç–æ–ª—å–∫–æ –≤ file1: {len(pairs1 - pairs2)}")
print(f"  –ü–∞—Ä —Ç–æ–ª—å–∫–æ –≤ file2: {len(pairs2 - pairs1)}")

# –ü–æ–¥—Å—á–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏
comment_col = df1.columns[3]  # D
transferable_comments = 0
for _, row in df1.iterrows():
    cve = str(row[cve1_col]).strip() if pd.notna(row[cve1_col]) else ''
    proj = str(row[project1_col]).strip() if pd.notna(row[project1_col]) else ''
    comment = str(row[comment_col]).strip() if pd.notna(row[comment_col]) else ''

    if cve and proj and comment and (cve, proj) in matched_pairs:
        transferable_comments += 1

print(f"\n‚ú® –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞: {transferable_comments}")

print("\n" + "=" * 80)
print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
print("=" * 80)
